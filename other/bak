0902

 $order_pattern=$database->select("v_receiving",[
            "orders_id",
            "pattern_id"
        ],[
            "id"=>$i
        ]);


        $del_order_pattern=$database->delete("order_pattern",[
                    "id"=>$order_pattern_id[0][order_pattern_id]
                ]);


                $del_orders=$database->delete("orders",[
                    "id"=>$order_pattern[0][orders_id]
                ]);


                $del_pattern=$database->delete("pattern",[
                    "id"=>$order_pattern[0][pattern_id]
           ]);

0824
  // 一步定义和注册
    Vue.component('my-component', {

    });



0823

    //聚焦input框,没有效果
    $('#rowno').focus();



<input  name="amount" disabled="disabled" v-if="new_deliveries.price=''|| new_deliveries.pieces!=''" value="" lazy>
<input name="amount" disabled="disabled" v-else value="{{ new_deliveries.price * new_deliveries.pieces}}" lazy>


<td @click="getIndex($index)">


var GLOBAL={};

    $('table').on("oncontextmenu","tr",function () {
        GLOBAL.id=3/*$(this).attr('delivery-id')*/;
         alert(GLOBAL.id);

        }
    );

    /*alert(vue.getIndex());*/
    /*$('tr').click(function () {
        alert(3);
            /!*var i = $(this).attr('delivery-id');
            alert(i);*!/
        }
    );*/

    <input v-bind:value="item.delivery_date">




    //这个方法有两个作用:1.提取被点击行的id,从而被delete方法调用,删除行。2.切换被点击行的css样式
    getId: function (item) {

    var new_click = "#i" + item.id;
    var old_click = "#i" + this.id;

    this.id = item.id;    //获取被点击行的id

    if (old_click == new_click) {                        //判断此地点击是否是点击在之前选中的行上,还是新的一行
    if ($(new_click).hasClass("table_hover")) {      //判断该行,之前是否是已经加上了选中效果
    $(new_click).removeClass("table_hover getId");
    this.id = "";
    } else {
    $(new_click).addClass("table_hover getId");

    }
    } else {
    $(new_click).addClass("table_hover getId");
    $(old_click).removeClass("table_hover getId");
    }

    },





    filter:function () {
    $.each(_self.new_deliveries, function (i, j) {   //i是索引,j是数组值  *这里会是个对象
    var x = i;
    if ((j.price == "" || j.price == null) || (j.pieces == "" || j.pieces == null) || (j.pattern == "" || j.pattern == null)) {
    if(i!=0){       //判断第一行是否花型、条数、单价这三个必填项没填
    _self.new_deliveries=0;
    return false;
    }
    else{
    $.each(j, function (key, value) {     //将每一行中空的元素从new_deliveries删除
    if (value == "") {
    delete _self.new_deliveries[x][key];
    }
    });
    }
    } else {
    $.each(j, function (key, value) {
    if (value == "") {
    delete _self.new_deliveries[x][key];
    }
    });
    }
    });
    },

    Verify: function () {
    if(arr.length!=0){

    /*
    1.遍历对象数组,如果花型、条数、单价这三个必填项为空,则退出循环
    2.删除对象中值为""的元素
    3.这一块可能用vue的filter方法比较好
    */


    }
    return arr;
    },

    insert: function () {
    var _self = this;      //将this这个VM传给全局变量

    var status = 1;     //命名一个状态，用以标示条件是否为真，1为真，0为假

    var json="";



    if (status == 0) {
    alert("请填写花型、条数、单价!");
    } else {
    json = JSON.stringify(_self.new_deliveries);
        $.ajax({
        type: 'POST',
        url: '../controller/insert.php',
        data: {json: json},
        success: function (msg) {
        _self.moverow();
        _self.show();
        }
        });
    }

    },




//测试动态生成的td是否在dom树中
                this.new_deliveries = this.new_deliveries.filter(function (item) {
                    for (var obj in item) {
                        if (item[obj] == '') {
                            item[obj] = null;
                        }
                    }
                    return item;
                });

                console.log(this.new_deliveries[0].length());



                 /* function Verify() {
                        $()
                    }*/




           function Verify() {
                   $()
               }



           //对象的prototype会影响jquery的遍历,数组则不会
               Object.prototype.length = function (val) {
                   var count = 0;
                   for (var i in val) {
                       count++;
                   }
                   return count;
               };


//计算金额
compute: {
            amount: function (item) {
                return item.price * item.pieces;
            }
        },